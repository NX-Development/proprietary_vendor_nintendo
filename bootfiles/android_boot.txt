scrrev=7

# Set defaults env variables if they do not exist.
setenv boot_dir ${prefix}
test -n ${id}                   || setenv id SWR-AND
test -n ${emmc}                 || setenv emmc 0
test -n ${fbconsole}            || setenv fbconsole 1
test -n ${uart_port}            || setenv uart_port 0
test -n ${usb_port}             || setenv usb_port 0
test -n ${r2p_action}           || setenv r2p_action bootloader
test -n ${autoboot}             || setenv autoboot 0
test -n ${autoboot_list}        || setenv autoboot_list 0

# Set logging params for each serial type.
setenv uarta "no_console_suspend console=ttyS0,115200,8n1 loglevel=8"
setenv uartb "no_console_suspend console=ttyS1,115200,8n1 loglevel=8"
setenv uartc "no_console_suspend console=ttyS2,115200,8n1 loglevel=8"
setenv usblg "console=ttyGS0,115200,8n1 loglevel=8"
setenv nocon "console=null loglevel=5"

# Set kernel load address
setenv kernload 0xA0000000

# Set SoC info.
if test ${t210b01} = 1; then setenv plat_info T210B01; else setenv plat_info T210; fi

# Set SKU info.
if   test ${sku} = 0; then setenv hw_sku odin
elif test ${sku} = 1; then setenv hw_sku modin
elif test ${sku} = 2; then setenv hw_sku vali
elif test ${sku} = 3; then setenv hw_sku frig; fi

# Print platform info.
echo PLAT:   ${plat_info} SKU: ${hw_sku}
echo Serial: ${device_serial}
echo BT MAC: ${device_bt_mac}
echo WF MAC: ${device_wifi_mac}

# SD is always bootfile mmc
setenv sdmmc_idx 1

setenv mmc_idx 1

# Check if eMMC boot is enabled
if test -n ${emmc}; then
    setenv mmc_idx 0
    echo eMMC boot enabled!
# Keep overlay check for compat
elif test -n ${overlays}; then
    for ov in ${overlays}; do
        if test "${ov}" = "tegra210-icosa_emmc-overlay"; then
            setenv mmc_idx 0
            setenv emmc 1
            echo eMMC boot enabled!
            echoe eMMC boot overlay no longer needed--switch to just setting emmc=1 in uenv.txt
        fi
    done
else
    echo SD boot enabled!
fi

mmc dev $mmc_idx

# fastboot setup for our GPT layout
setenv fastboot_partition_alias_boot LNX
setenv fastboot_partition_alias_system APP
setenv fastboot_partition_alias_userdata UDA
setenv fastboot_partition_alias_cache CAC
setenv fastboot_partition_alias_recovery SOS
setenv fastboot_partition_alias_dtb DTB

# load fastboot first so 'fastboot continue' works
gpio input 191 || fastboot 0

# generate a uboot version we can assert against in recovery
setexpr ver_simple gsub "U-Boot (.*) \\(.*\\)" "\\1-rev$scrrev" "$ver"

# find root partition and convert to decimal
part number mmc $mmc_idx APP app_part_num
setexpr app_part_num_dec gsub "^0x1$" 1 $app_part_num
setexpr app_part_num_dec gsub "^0x2$" 2 $app_part_num
setexpr app_part_num_dec gsub "^0x3$" 3 $app_part_num
setexpr app_part_num_dec gsub "^0x4$" 4 $app_part_num
setexpr app_part_num_dec gsub "^0x5$" 5 $app_part_num
setexpr app_part_num_dec gsub "^0x6$" 6 $app_part_num
setexpr app_part_num_dec gsub "^0x7$" 7 $app_part_num
setexpr app_part_num_dec gsub "^0x8$" 8 $app_part_num
setexpr app_part_num_dec gsub "^0x9$" 9 $app_part_num
setexpr app_part_num_dec gsub "^0xa$" 10 $app_part_num
setexpr app_part_num_dec gsub "^0xb$" 11 $app_part_num
setexpr app_part_num_dec gsub "^0xc$" 12 $app_part_num
setexpr app_part_num_dec gsub "^0xd$" 13 $app_part_num
setexpr app_part_num_dec gsub "^0xe$" 14 $app_part_num
setexpr app_part_num_dec gsub "^0xf$" 15 $app_part_num
setexpr app_part_num_dec gsub "^0x10$" 16 $app_part_num

# Set default macs, to be overridden by joycons
if test -n ${device_bt_mac};   then bt_mac=${device_bt_mac}; fi
if test -n ${device_wifi_mac}; then wifi_mac=${device_wifi_mac}; fi

host_mac_addr=0xff

# load mac address info file
if fatload mmc ${sdmmc_idx}:1 0x90000000 switchroot/joycon_mac.bin; then
    if itest.b *0x90000000 == 0x01; then
        echo Left JoyCon is available
        host_mac_addr=0x90000007
    else
        echoe Left JoyCon pairing info is not available!
    fi

    if itest.b *0x9000001d == 0x02; then
        echo Right JoyCon is available
        host_mac_addr=0x90000024
    else
        echoe Right JoyCon pairing info is not available!
    fi
fi

if itest $host_mac_addr == 0xff; then
    echo No JoyCons available
else
    bt_mac=""
    sep=""
    for i in 0 1 2 3 4 5 ; do
        setexpr x $host_mac_addr + $i
        setexpr.b b *$x
        if itest $b <= f; then
            # There is no way to have leading zeros, so do this hack
            bt_mac="$bt_mac${sep}0$b"
        else
            bt_mac="$bt_mac$sep$b"
        fi
        sep=":"
    done

    setexpr.b last_byte *0x90000005
    if itest $last_byte == 0xFF; then
        # wrap around case
        setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\100" $bt_mac
    else
        setexpr.b wb $last_byte + 1
        if itest $wb <= f; then
            setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\10$wb" $bt_mac
        else
            setexpr wifi_mac gsub "(.*:.*:.*:.*:.*:).*" "\\1$wb" $bt_mac
        fi
    fi
fi

# Add additional bootargs for UART Logging.
if   test ${uart_port} = 1; then
	setenv bootargs_extra ${bootargs_extra} ${uarta}; echoe Enabled UART-A logging
    setenv androidcon ${androidcon}:ttyS0
elif test ${uart_port} = 2; then
	setenv bootargs_extra ${bootargs_extra} ${uartb}; echoe Enabled UART-B logging
	fdt set /serial@70006040 compatible nvidia,tegra20-uart
	fdt set /serial@70006040/joyconr status disabled
    setenv androidcon ${androidcon}:ttyS1
elif test ${uart_port} = 3; then
	setenv bootargs_extra ${bootargs_extra} ${uartc}; echoe Enabled UART-C logging
	fdt set /serial@70006200 compatible nvidia,tegra20-uart
	fdt set /serial@70006200/joyconl status disabled
    setenv androidcon ${androidcon}:ttyS2
else
    # Kill console and set default loglevel
    setenv bootargs_extra ${nocon}
    setenv androidcon ""
fi

# Add additional bootargs for Serial USB.
if   test ${usb_port} = 1; then
    echo Enabled USB Serial logging
	setenv bootargs_extra ${usblg} ${bootargs_extra}
    setenv androidcon ${androidcon}:ttyGS0
fi

# Set androidboot console arg
setenv bootargs_extra "${bootargs_extra} androidboot.console=${androidcon}"

# load dtb
part start mmc $mmc_idx DTB dtb_part_start
part size mmc $mmc_idx DTB dtb_part_size

mmc read $fdt_addr_r $dtb_part_start $dtb_part_size

fdt addr $fdt_addr_r

# Load overlays from env
fdt resize 16384
if test -n ${overlays}; then
    for ov in ${overlays}; do
        echo overlaying ${ov}...

        if fatload mmc ${sdmmc_idx}:1 0x8f000000 switchroot/overlays/${ov}.dtbo && fdt apply 0x8f000000; then
            echo Successfully loaded ${ov}.dtbo...
        else
            # Error on failure to apply
            echoe failed to overlay ${ov}!; sleep 5; reset
        fi
    done
fi

# Patch DT on eMMC boot
if test -n ${emmc}; then
    fdt set /sdhci@700b0600 status okay
    setenv bootargs_extra "${bootargs_extra} androidboot.boot_devices=sdhci-tegra.3"
else
    setenv bootargs_extra "${bootargs_extra} androidboot.boot_devices=sdhci-tegra.0"
fi

# insert mac address dtb node
fdt set /chosen nvidia,wifi-mac ${wifi_mac}
fdt set /chosen nvidia,bluetooth-mac ${bt_mac}

# Get display panel handle.
if   test ${display_id} = f20;  then echo Display is INN 6.2; fdt get value DHANDLE /host1x/dsi/panel-i-720p-6-2 phandle
elif test ${display_id} = f30;  then echo Display is AUO 6.2; fdt get value DHANDLE /host1x/dsi/panel-a-720p-6-2 phandle
elif test ${display_id} = 10;   then echo Display is JDI 6.2; fdt get value DHANDLE /host1x/dsi/panel-j-720p-6-2 phandle
elif test ${display_id} = 1020; then echo Display is INN 5.5; fdt get value DHANDLE /host1x/dsi/panel-i-720p-5-5 phandle
elif test ${display_id} = 1030; then echo Display is AUO 5.5; fdt get value DHANDLE /host1x/dsi/panel-a-720p-5-5 phandle
elif test ${display_id} = 1040; then echo Display is SHP 5.5; fdt get value DHANDLE /host1x/dsi/panel-sh-720p-5-5 phandle
elif test ${display_id} = 2050; then echo Display is SAM 7.0
elif test ${sku} = 3;      then echo Display is SAM 7.0
else echoe Unknown Display ID: ${display_id}!; fi

# Set new active display panel handle.
if test -n ${DHANDLE}; then echo Setting Display panel; fdt resize 8192; fdt set /host1x@50000000/dsi nvidia,active-panel <$DHANDLE>; fi

# Set battery voltage limit via cell age for Vali.
if test ${sku} = 2 -a test -n ${VLIM}; then
	fdt set /i2c@7000c000/battery-charger@6b/charger ti,charge-voltage-limit-millivolt <0x$VLIM>
	fdt set /i2c@7000c000/battery-charger@6b/charger ti,charge-thermal-voltage-limit <0x$VLIM 0x$VLIM 0x$VLIM 0xFF0>
	fdt set /i2c@7000c000/battery-gauge@36 maxim,kernel-maximum-soc <0x$SOCLIM>
fi

# Set common bootargs
setenv bootargs_path "{bootargs_extra} init=/init nvdec_enabled=0 usbcore.autosuspend=-1 log_buf_len=4M androidboot.bootloader=${ver_simple} androidboot.hardware=nx \
                      androidboot.hardware.sku=${hw_sku} androidboot.selinux=permissive androidboot.serialno=${device_serial} androidboot.modem=none \
                      pcie_aspm=off vpr_resize pmc_r2p.enabled=1 pmc_r2p.action=${r2p_action} pmc_r2p.entry_id=${hekate_id} \
                      pmc_r2p.param1=${autoboot} pmc_r2p.param1=${autoboot_list}  fbcon=map:${fbconsole} tegra_fbmem=0x800000@0xf5a00000"

# gpio 190 = VOL_UP, 191 = VOL_DOWN
if gpio input 190 && test ${recovery} = "0"; then
    # normal boot
    part start mmc ${mmc_idx} LNX kernel_part_start
    part size mmc ${mmc_idx} LNX kernel_part_size

    setenv bootargs "${bootargs_path} skip_initramfs ro rootwait root=/dev/mmcblk0p${app_part_num_dec} firmware_class.path=/vendor/firmware \
    bluetooth.disable_ertm=1 "
else
    # recovery
    part start mmc ${mmc_idx} SOS kernel_part_start
    part size mmc ${mmc_idx} SOS kernel_part_size

    setenv bootargs "${bootargs_path} firmware_class.path=/etc/firmware "
fi

mmc read ${kernload} ${kernel_part_start} ${kernel_part_size}

bootm ${kernload} ${kerneload} ${fdt_addr_r}

echoe Failed to launch kernel!
echoe  
echoe Rebooting in 10s...

sleep 10
reset
